import os
import json
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import time

def getIdFromFile(file_path: str) -> str:
    """
    Extrae el nombre del archivo sin extensi√≥n ni ruta.

    Args:
        file_path (str): Ruta completa o nombre del archivo.

    Returns:
        str: Nombre del archivo sin extensi√≥n.
    """
    return os.path.splitext(os.path.basename(file_path))[0]

def getVectorialIdFromFile(file_path: str) -> str:
    """
    Obtiene el ID vectorial desde un path de archivo.
    Si el nombre contiene una o m√°s partes separadas por '_', se sigue esta l√≥gica:
    - Si hay dos partes, devuelve la primera.
    - Si hay tres partes, devuelve la del medio.
    - Si hay una sola parte, devuelve esa.
    - Si hay m√°s de tres, devuelve la segunda como valor representativo.

    Args:
        file_path (str): Ruta completa o nombre del archivo.

    Returns:
        str: ID vectorial basado en la estructura del nombre.
    """
    base_id = getIdFromFile(file_path)
    partes = base_id.split('_')

    if len(partes) == 1:
        return partes[0]
    elif len(partes) == 2:
        return partes[0]
    elif len(partes) == 3:
        return partes[1]
    else:
        return partes[1] 


import os

def listJSONs():
    """
    Busca todos los archivos JSON en el directorio 'data/json' y sus subdirectorios
    (excepto 'refined') y devuelve una lista con las rutas completas de cada uno.

    Returns:
        list[str]: Una lista de rutas completas a los archivos .json encontrados en 'data/json' y sus subdirectorios.
    """
    ruta = 'data/json'
    jsons = []

    for root, dirs, files in os.walk(ruta):
        if 'refined' in dirs:
            dirs.remove('refined')

        if 'reference' in dirs:
            dirs.remove('reference')

        for archivo in files:
            if archivo.endswith('.json'):
                jsons.append(os.path.join(root, archivo))

    return jsons



import tempfile
import shutil

import time
import shutil
import os
import tempfile
import json
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

def downloadPDFs(json_file_paths):
    """
    Descarga PDFs desde la propiedad 'Link ficha t√©cnica' en cada JSON usando Selenium.
    El PDF se renombra como <id_unico_extra√≠do_con_GetVectorialLeaderFromFile>.pdf.
    Si ya existe, no se vuelve a descargar.

    Args:
        json_file_paths (list[str]): Lista de rutas completas a archivos JSON.
    """
    destino = 'data/pdf'
    os.makedirs(destino, exist_ok=True)

    carpeta_temp = tempfile.mkdtemp()

    options = Options()
    options.headless = True
    prefs = {
        "download.default_directory": os.path.abspath(carpeta_temp),
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "plugins.always_open_pdf_externally": True,
    }
    options.add_experimental_option("prefs", prefs)

    # Configuraci√≥n para el WebDriver
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)

    for json_path in json_file_paths:
        try:
            with open(json_path, 'r', encoding='utf-8') as f:
                contenido = json.load(f)

            ficha_url = contenido.get('Link ficha t√©cnica')
            if ficha_url and ficha_url.endswith('.pdf'):
                # Usamos solo el ID extra√≠do como nombre final del PDF
                nombre_final = f"{getVectorialIdFromFile(json_path)}.pdf"
                ruta_destino_final = os.path.join(destino, nombre_final)

                if os.path.exists(ruta_destino_final):
                    print(f"üü¢ Ya existe: {nombre_final} ‚Äî no se descarga de nuevo.")
                    continue

                print(f"üü° Descargando desde: {ficha_url}")
                driver.get(ficha_url)

                # Esperar hasta que el PDF se haya descargado completamente
                nombre_descarga_original = os.path.basename(ficha_url)
                ruta_descargada = os.path.join(carpeta_temp, nombre_descarga_original)
                ruta_descargando = ruta_descargada + ".crdownload"  # Archivo temporal de Chrome

                timeout = 30  # Aumentar el timeout si la descarga es lenta
                start_time = time.time()
                while True:
                    if os.path.exists(ruta_descargada) and not os.path.exists(ruta_descargando):
                        break
                    if time.time() - start_time > timeout:
                        raise TimeoutError(f"‚è∞ Timeout esperando la descarga del PDF desde: {ficha_url}.")
                    time.sleep(1)  # Espera m√°s tiempo entre comprobaciones

                # Renombramos el archivo descargado al nombre final deseado
                shutil.move(ruta_descargada, ruta_destino_final)
                print(f"‚úÖ Descarga completada y guardada como: {nombre_final}")
            else:
                print(f"‚ÑπÔ∏è No hay ficha t√©cnica v√°lida en: {json_path}")
        except Exception as e:
            print(f"‚ùå Error en {json_path}: {e}")

    driver.quit()




def validate_convocatoria_json(json_path):
    """
    Dado el path de un archivo JSON, esta funci√≥n verifica si contiene todos los campos
    obligatorios definidos en la estructura de una convocatoria. Si falta alguno, se elimina
    el archivo y se devuelve False. Si est√°n todos los campos, devuelve True.

    Args:
        json_path (str): Ruta al archivo JSON que se quiere validar.

    Returns:
        bool: True si el JSON contiene todos los campos requeridos, False si no.
    """
    required_fields = [
        "Organismo convocante",
        "Nombre de la convocatoria",
        "Linea de la convocatoria",
        "Modalidad o tipo espec√≠fico",
        "Beneficiarios",
        "Presupuesto m√≠nimo disponible",
        "Presupuesto m√°ximo disponible",
        "Fecha de inicio de la convocatoria",
        "Fecha de fin de la convocatoria",
        "Objetivos de la convocatoria",
        "Tipo de la convocatoria",
        "√Årea de la convocatoria",
        "Duraci√≥n m√≠nima",
        "Duraci√≥n m√°xima",
        "Tipo de financiaci√≥n",
        "Forma y plazo de cobro",
        "Minimis",
        "Regi√≥n de aplicaci√≥n",
        "Tipo de consorcio",
        "Costes elegibles",
        "Link ficha t√©cnica",
        "Link convocatoria",
        "Link orden de bases"
    ]

    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        for field in required_fields:
            if field not in data:
                print(f"‚ùå Campo faltante: '{field}' en {json_path}")
                os.remove(json_path)
                return False

        return True

    except Exception as e:
        print(f"‚ö†Ô∏è Error al procesar {json_path}: {e}")
        return False


def add_missing_keys_to_json(json_file_path):
    """
    Dado un archivo JSON, a√±ade tres claves vac√≠as al JSON y guarda el archivo modificado.
    
    Las claves a√±adidas son:
    - "a√±o"
    - "intensidad de la subvenci√≥n"
    - "intensidad del pr√©stamo"
    
    Args:
        json_file_path (str): Ruta completa al archivo JSON que se va a modificar.
    
    Returns:
        None
    """
    try:
        # Cargar el JSON desde el archivo
        with open(json_file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        # A√±adir las nuevas claves con valores vac√≠os
        data['ano'] = ''
        data['Intensidad de la subvenci√≥n'] = ''
        data['Intensidad del pr√©stamo'] = ''

        # Guardar el archivo modificado
        with open(json_file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        
        print(f"El archivo {json_file_path} se ha modificado correctamente.")
    
    except Exception as e:
        print(f"Error al modificar el archivo {json_file_path}: {e}")
